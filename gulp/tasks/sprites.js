// Generate "sprites" -  single file which contains
// many icons inside, Goal - reduce images download
// time for client's browsers
// Steps:
// 1. Take all individual  files
// 2. Run gulp-svg-sprite plugin to pack them into
//   one SVG XML file.

var gulp = require('gulp'),
    svgSprite = require('gulp-svg-sprite'),
    rename = require('gulp-rename');

// Configuration object for the plugin
// Generates CSS file with positions and offsets
// for every icon.
//
var config = {
  mode: {
    css: {
      sprite: 'sprite.svg',
      render: {
        css: {
          template: './gulp/templates/sprite.css'
        }
      }
    }
  }
}

// Generate new sprite file according to config object ,
//    and template file
gulp.task('createSprite', function() {
  return gulp.src('./app/assets/images/icons/**/*.svg')
    .pipe(svgSprite(config))
    .pipe(gulp.dest('./app/temp/sprite/'));
});
// Copy .svg file with icons, generated by createSprite
gulp.task('copySpriteGraphic',['createSprite'], function() {
    return gulp.src('./app/temp/sprite/css/**/*.svg')
      .pipe(gulp.dest('./app/assets/images/sprites'));
});

// Copy created Sprite CSS file into centralized location
gulp.task('copySpriteCSS',['createSprite'], function() {
  return gulp.src('./app/temp/sprite/css/*.css')
    .pipe(rename('_sprite.css'))
    .pipe(gulp.dest('./app/assets/styles/modules'));
});

// Run Icon Sprite generation and distribution to directory tree
gulp.task('icons', ['createSprite','copySpriteGraphic','copySpriteCSS']);
